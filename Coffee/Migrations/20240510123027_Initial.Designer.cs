// <auto-generated />
using System;
using Coffee.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Coffee.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240510123027_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Coffee.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Photo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("IdCategory")
                        .HasName("Category_pkey");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Coffee.Models.Cooking", b =>
                {
                    b.Property<int>("IdCooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCooking"));

                    b.Property<DateTime>("DateAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdOrder")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.HasKey("IdCooking")
                        .HasName("Cookings_pkey");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdUser");

                    b.ToTable("Cookings");
                });

            modelBuilder.Entity("Coffee.Models.Dish", b =>
                {
                    b.Property<int>("IdDish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDish"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("IdDish")
                        .HasName("Dishes_pkey");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("Coffee.Models.DishCategory", b =>
                {
                    b.Property<int>("IdList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdList"));

                    b.Property<int>("IdCategory")
                        .HasColumnType("integer");

                    b.Property<int>("IdDish")
                        .HasColumnType("integer");

                    b.HasKey("IdList")
                        .HasName("DishCategory_pkey");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdDish");

                    b.ToTable("DishCategory", (string)null);
                });

            modelBuilder.Entity("Coffee.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrder"));

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("FullPrice")
                        .HasColumnType("real");

                    b.Property<int>("IdStatus")
                        .HasColumnType("integer");

                    b.HasKey("IdOrder")
                        .HasName("Orders_pkey");

                    b.HasIndex("IdStatus");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Coffee.Models.OrderDish", b =>
                {
                    b.Property<int>("IdList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdList"));

                    b.Property<int>("CountDishes")
                        .HasColumnType("integer");

                    b.Property<int>("IdDish")
                        .HasColumnType("integer");

                    b.Property<int>("IdOrder")
                        .HasColumnType("integer");

                    b.HasKey("IdList")
                        .HasName("OrderDish_pkey");

                    b.HasIndex("IdDish");

                    b.HasIndex("IdOrder");

                    b.ToTable("OrderDish", (string)null);
                });

            modelBuilder.Entity("Coffee.Models.Post", b =>
                {
                    b.Property<int>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPost"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("IdPost")
                        .HasName("Posts_pkey");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Coffee.Models.Promotion", b =>
                {
                    b.Property<int>("IdPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPromotion"));

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdDish")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.HasKey("IdPromotion")
                        .HasName("Promotions_pkey");

                    b.HasIndex("IdDish");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Coffee.Models.StatusesOrder", b =>
                {
                    b.Property<int>("IdStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStatus"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("IdStatus")
                        .HasName("StatusesOrder_pkey");

                    b.ToTable("StatusesOrder", (string)null);
                });

            modelBuilder.Entity("Coffee.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("FName");

                    b.Property<int>("IdPost")
                        .HasColumnType("integer");

                    b.Property<string>("Lname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("LName");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Sname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("SName");

                    b.HasKey("IdUser")
                        .HasName("Users_pkey");

                    b.HasIndex("IdPost");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Coffee.Models.Cooking", b =>
                {
                    b.HasOne("Coffee.Models.Order", "IdOrderNavigation")
                        .WithMany("Cookings")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("Cookings_IdOrder_fkey");

                    b.HasOne("Coffee.Models.User", "IdUserNavigation")
                        .WithMany("Cookings")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("Cookings_IdUser_fkey");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Coffee.Models.DishCategory", b =>
                {
                    b.HasOne("Coffee.Models.Category", "IdCategoryNavigation")
                        .WithMany("DishCategories")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("DishCategory_IdCategory_fkey");

                    b.HasOne("Coffee.Models.Dish", "IdDishNavigation")
                        .WithMany("DishCategories")
                        .HasForeignKey("IdDish")
                        .IsRequired()
                        .HasConstraintName("DishCategory_IdDish_fkey");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdDishNavigation");
                });

            modelBuilder.Entity("Coffee.Models.Order", b =>
                {
                    b.HasOne("Coffee.Models.StatusesOrder", "IdStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdStatus")
                        .IsRequired()
                        .HasConstraintName("Orders_IdStatus_fkey");

                    b.Navigation("IdStatusNavigation");
                });

            modelBuilder.Entity("Coffee.Models.OrderDish", b =>
                {
                    b.HasOne("Coffee.Models.Dish", "IdDishNavigation")
                        .WithMany("OrderDishes")
                        .HasForeignKey("IdDish")
                        .IsRequired()
                        .HasConstraintName("OrderDish_IdDish_fkey");

                    b.HasOne("Coffee.Models.Order", "IdOrderNavigation")
                        .WithMany("OrderDishes")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("OrderDish_IdOrder_fkey");

                    b.Navigation("IdDishNavigation");

                    b.Navigation("IdOrderNavigation");
                });

            modelBuilder.Entity("Coffee.Models.Promotion", b =>
                {
                    b.HasOne("Coffee.Models.Dish", "IdDishNavigation")
                        .WithMany("Promotions")
                        .HasForeignKey("IdDish")
                        .IsRequired()
                        .HasConstraintName("Promotions_IdDish_fkey");

                    b.Navigation("IdDishNavigation");
                });

            modelBuilder.Entity("Coffee.Models.User", b =>
                {
                    b.HasOne("Coffee.Models.Post", "IdPostNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("Users_IdPost_fkey");

                    b.Navigation("IdPostNavigation");
                });

            modelBuilder.Entity("Coffee.Models.Category", b =>
                {
                    b.Navigation("DishCategories");
                });

            modelBuilder.Entity("Coffee.Models.Dish", b =>
                {
                    b.Navigation("DishCategories");

                    b.Navigation("OrderDishes");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("Coffee.Models.Order", b =>
                {
                    b.Navigation("Cookings");

                    b.Navigation("OrderDishes");
                });

            modelBuilder.Entity("Coffee.Models.Post", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Coffee.Models.StatusesOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Coffee.Models.User", b =>
                {
                    b.Navigation("Cookings");
                });
#pragma warning restore 612, 618
        }
    }
}
